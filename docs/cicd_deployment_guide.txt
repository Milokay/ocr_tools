# 🚀 CI/CD & Deployment Implementation Guide
# Complete GitHub Actions workflow for OCR Tools automation

# ============================================================================
# CONTINUOUS INTEGRATION WORKFLOW
# ============================================================================

# .github/workflows/ci.yml
name: 🔧 Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.8'
  TESSERACT_VERSION: '5.0'

jobs:
  # ============================================================================
  # CODE QUALITY AND LINTING
  # ============================================================================
  code-quality:
    name: 📝 Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: 🔄 Checkout Code
      uses: actions/checkout@v3
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 📦 Cache Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: 📥 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install flake8 black isort mypy pylint
    
    - name: 🔍 Run Flake8 Linting
      run: |
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: ⚫ Check Black Formatting
      run: |
        black --check --diff src/ tests/
    
    - name: 🔄 Check Import Sorting
      run: |
        isort --check-only --diff src/ tests/
    
    - name: 🔍 Run MyPy Type Checking
      run: |
        mypy src/ --ignore-missing-imports
    
    - name: 📊 Run Pylint Analysis
      run: |
        pylint src/ --exit-zero --score=yes

  # ============================================================================
  # UNIT AND INTEGRATION TESTS
  # ============================================================================
  tests:
    name: 🧪 Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10']
    
    steps:
    - name: 🔄 Checkout Code
      uses: actions/checkout@v3
    
    - name: 🐍 Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: 🔧 Install Tesseract (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr tesseract-ocr-eng
        tesseract --version
    
    - name: 🔧 Install Tesseract (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install tesseract
        $env:PATH += ";C:\Program Files\Tesseract-OCR"
        tesseract --version
    
    - name: 📦 Cache Dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.cache/poetry
        key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements.txt') }}
    
    - name: 📥 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: 🧪 Run Unit Tests
      run: |
        python -m pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=html
    
    - name: 🔗 Run Integration Tests
      run: |
        python -m pytest tests/integration/ -v --cov=src --cov-append --cov-report=xml
    
    - name: 📊 Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # ============================================================================
  # PERFORMANCE BENCHMARKING
  # ============================================================================
  performance:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: [code-quality, tests]
    
    steps:
    - name: 🔄 Checkout Code
      uses: actions/checkout@v3
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 🔧 Install Tesseract
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr tesseract-ocr-eng
    
    - name: 📥 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark memory_profiler
    
    - name: ⚡ Run Performance Tests
      run: |
        python -m pytest tests/performance/ -v --benchmark-json=benchmark.json
    
    - name: 🧠 Run Memory Tests
      run: |
        python -m pytest tests/performance/test_memory_usage.py -v
    
    - name: 📊 Upload Benchmark Results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark.json

  # ============================================================================
  # SECURITY SCANNING
  # ============================================================================
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 🔄 Checkout Code
      uses: actions/checkout@v3
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 📥 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit semgrep
    
    - name: 🔒 Run Safety Check
      run: |
        safety check --json --output safety-report.json
      continue-on-error: true
    
    - name: 🔍 Run Bandit Security Scan
      run: |
        bandit -r src/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: 🔎 Run Semgrep Scan
      run: |
        semgrep --config=auto src/ --json --output=semgrep-report.json
      continue-on-error: true
    
    - name: 📊 Upload Security Reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json
          semgrep-report.json

---

# ============================================================================
# DEPLOYMENT WORKFLOW
# ============================================================================

# .github/workflows/deploy.yml
name: 🚀 Deployment

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  PYTHON_VERSION: '3.8'

jobs:
  # ============================================================================
  # BUILD AND PACKAGE
  # ============================================================================
  build:
    name: 📦 Build Package
    runs-on: ubuntu-latest
    
    steps:
    - name: 🔄 Checkout Code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Full history for version numbering
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 📥 Install Build Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine wheel setuptools
    
    - name: 🏗️ Build Package
      run: |
        python -m build
    
    - name: ✅ Verify Package
      run: |
        twine check dist/*
    
    - name: 📊 Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-package
        path: dist/

  # ============================================================================
  # DOCKER CONTAINERIZATION
  # ============================================================================
  docker:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: 🔄 Checkout Code
      uses: actions/checkout@v3
    
    - name: 🔧 Setup Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: 🔑 Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: 🏷️ Extract Metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: yourorg/ocr-tools
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
    
    - name: 🏗️ Build and Push Docker Image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./docker/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ============================================================================
  # STAGING DEPLOYMENT
  # ============================================================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, docker]
    environment: staging
    if: github.event.inputs.environment == 'staging' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: 🔄 Checkout Code
      uses: actions/checkout@v3
    
    - name: 📥 Download Build Artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-package
        path: dist/
    
    - name: 🚀 Deploy to Staging Server
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: scp, rsync, kubectl, docker-compose, etc.
    
    - name: 🧪 Run Staging Tests
      run: |
        echo "Running staging validation tests..."
        # Add staging-specific tests here
    
    - name: 📝 Create Deployment Summary
      run: |
        echo "## Staging Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: Staging" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployed at**: $(date)" >> $GITHUB_STEP_SUMMARY

  # ============================================================================
  # PRODUCTION DEPLOYMENT
  # ============================================================================
  deploy-production:
    name: 🏭 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, docker]
    environment: production
    if: github.event_name == 'release' || github.event.inputs.environment == 'production'
    
    steps:
    - name: 🔄 Checkout Code
      uses: actions/checkout@v3
    
    - name: 📥 Download Build Artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-package
        path: dist/
    
    - name: 🚀 Deploy to Production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Include blue-green deployment, rollback capabilities, etc.
    
    - name: 🔍 Production Health Check
      run: |
        echo "Running production health checks..."
        # Add health check commands here
    
    - name: 📝 Create Deployment Summary
      run: |
        echo "## Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: Production" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployed at**: $(date)" >> $GITHUB_STEP_SUMMARY

---

# ============================================================================
# DOCKER CONFIGURATION
# ============================================================================

# docker/Dockerfile
FROM python:3.8-slim

# Install system dependencies
RUN apt-get update && apt-get install -y \
    tesseract-ocr \
    tesseract-ocr-eng \
    libgl1-mesa-glx \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    libgthread-2.0-0 \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY src/ ./src/
COPY config/ ./config/
COPY scripts/ ./scripts/

# Create necessary directories
RUN mkdir -p debug_output screenshots logs

# Set environment variables
ENV PYTHONPATH=/app
ENV TESSERACT_CMD=/usr/bin/tesseract

# Expose port (if needed for web interface)
EXPOSE 8000

# Create non-root user
RUN useradd -m -u 1000 ocruser && chown -R ocruser:ocruser /app
USER ocruser

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python scripts/health_check.py || exit 1

# Default command
CMD ["python", "scripts/run_automation.py"]

---

# docker/docker-compose.yml
version: '3.8'

services:
  ocr-automation:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: ocr-tools-automation
    volumes:
      - ./data:/app/data
      - ./debug_output:/app/debug_output
      - ./screenshots:/app/screenshots
      - ./logs:/app/logs
      - ./config:/app/config
    environment:
      - OCR_DEBUG_MODE=false
      - OCR_SAVE_DEBUG_IMAGES=true
      - TESSERACT_CMD=/usr/bin/tesseract
    networks:
      - ocr-network
    restart: unless-stopped
    
  # Optional: Web interface for monitoring
  ocr-web-interface:
    build:
      context: ..
      dockerfile: docker/Dockerfile.web
    container_name: ocr-web-interface
    ports:
      - "8080:8000"
    depends_on:
      - ocr-automation
    environment:
      - WEB_HOST=0.0.0.0
      - WEB_PORT=8000
    networks:
      - ocr-network
    restart: unless-stopped

networks:
  ocr-network:
    driver: bridge

volumes:
  ocr-data:
  ocr-logs:

---

# ============================================================================
# DEPLOYMENT SCRIPTS
# ============================================================================

# scripts/deploy.sh
#!/bin/bash

set -e

echo "🚀 OCR Tools Deployment Script"
echo "================================="

# Configuration
ENVIRONMENT=${1:-staging}
VERSION=${2:-latest}
DEPLOY_DIR="/opt/ocr-tools"
SERVICE_NAME="ocr-automation"

echo "📋 Deployment Configuration:"
echo "   Environment: $ENVIRONMENT"
echo "   Version: $VERSION"
echo "   Deploy Directory: $DEPLOY_DIR"

# Pre-deployment checks
echo "🔍 Running pre-deployment checks..."

# Check if Tesseract is installed
if ! command -v tesseract &> /dev/null; then
    echo "❌ Tesseract not found. Installing..."
    sudo apt-get update
    sudo apt-get install -y tesseract-ocr tesseract-ocr-eng
fi

# Check Python version
python_version=$(python3 --version | cut -d' ' -f2)
echo "✅ Python version: $python_version"

# Backup current deployment
if [ -d "$DEPLOY_DIR" ]; then
    echo "📦 Creating backup of current deployment..."
    sudo cp -r "$DEPLOY_DIR" "${DEPLOY_DIR}.backup.$(date +%Y%m%d_%H%M%S)"
fi

# Create deployment directory
echo "📁 Setting up deployment directory..."
sudo mkdir -p "$DEPLOY_DIR"
sudo chown $USER:$USER "$DEPLOY_DIR"

# Download and extract application
echo "📥 Downloading application version $VERSION..."
# Add your download logic here (wget, curl, docker pull, etc.)

# Install dependencies
echo "📦 Installing dependencies..."
cd "$DEPLOY_DIR"
python3 -m pip install -r requirements.txt

# Copy configuration
echo "⚙️ Setting up configuration..."
cp "config/${ENVIRONMENT}_config.yaml" "config/config.yaml"

# Set up systemd service (if applicable)
if [ "$ENVIRONMENT" = "production" ]; then
    echo "🔧 Setting up systemd service..."
    sudo cp "scripts/ocr-automation.service" "/etc/systemd/system/"
    sudo systemctl daemon-reload
    sudo systemctl enable "$SERVICE_NAME"
fi

# Run tests
echo "🧪 Running deployment tests..."
python3 -m pytest tests/deployment/ -v

# Start/restart service
echo "🚀 Starting service..."
if systemctl is-active --quiet "$SERVICE_NAME"; then
    sudo systemctl restart "$SERVICE_NAME"
else
    sudo systemctl start "$SERVICE_NAME"
fi

# Verify deployment
echo "✅ Verifying deployment..."
sleep 5
if systemctl is-active --quiet "$SERVICE_NAME"; then
    echo "✅ Service is running successfully"
else
    echo "❌ Service failed to start"
    sudo journalctl -u "$SERVICE_NAME" --no-pager -n 20
    exit 1
fi

echo "🎉 Deployment completed successfully!"
echo "📊 Deployment Summary:"
echo "   Environment: $ENVIRONMENT"
echo "   Version: $VERSION"
echo "   Status: SUCCESS"
echo "   Deployed at: $(date)"

---

# scripts/health_check.py
#!/usr/bin/env python3
"""Health check script for OCR automation service."""

import sys
import time
import subprocess
from pathlib import Path

def check_tesseract():
    """Check if Tesseract is accessible."""
    try:
        result = subprocess.run(['tesseract', '--version'], 
                              capture_output=True, text=True, timeout=10)
        return result.returncode == 0
    except Exception:
        return False

def check_python_dependencies():
    """Check if required Python packages are available."""
    required_packages = ['cv2', 'numpy', 'pytesseract', 'pandas']
    
    for package in required_packages:
        try:
            __import__(package)
        except ImportError:
            return False
    
    return True

def check_file_permissions():
    """Check if necessary directories are writable."""
    directories = ['debug_output', 'screenshots', 'logs']
    
    for directory in directories:
        dir_path = Path(directory)
        if not dir_path.exists():
            try:
                dir_path.mkdir(parents=True, exist_ok=True)
            except Exception:
                return False
        
        if not dir_path.is_dir() or not dir_path.exists():
            return False
    
    return True

def check_configuration():
    """Check if configuration files are present and valid."""
    config_file = Path('config/config.yaml')
    
    if not config_file.exists():
        return False
    
    try:
        import yaml
        with open(config_file, 'r') as f:
            config = yaml.safe_load(f)
        return isinstance(config, dict)
    except Exception:
        return False

def main():
    """Run all health checks."""
    checks = [
        ('Tesseract OCR', check_tesseract),
        ('Python Dependencies', check_python_dependencies),
        ('File Permissions', check_file_permissions),
        ('Configuration', check_configuration)
    ]
    
    all_passed = True
    
    print("🏥 Health Check Results:")
    print("========================")
    
    for check_name, check_func in checks:
        try:
            result = check_func()
            status = "✅ PASS" if result else "❌ FAIL"
            print(f"{check_name}: {status}")
            
            if not result:
                all_passed = False
                
        except Exception as e:
            print(f"{check_name}: ❌ ERROR - {str(e)}")
            all_passed = False
    
    print(f"\n🎯 Overall Status: {'✅ HEALTHY' if all_passed else '❌ UNHEALTHY'}")
    
    return 0 if all_passed else 1

if __name__ == "__main__":
    sys.exit(main())